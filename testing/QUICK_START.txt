================================================================================
                    DANZERO PROFILING - QUICK START
================================================================================

üéØ GOAL: Profile CPU/GPU utilization with 600-environment configuration

üìç LOCATION: /mnt/project_modelware/lizikang/DanZero

================================================================================
üöÄ RUN PROFILING TEST (Recommended)
================================================================================

$ cd /mnt/project_modelware/lizikang/DanZero
$ source /mnt/project_modelware/lizikang/Danvenv/bin/activate
$ python testing/scripts/test_with_profiling.py

‚è±Ô∏è  Duration: ~2-3 minutes (20 iterations)
üìä Output: testing/outputs/profiling_[timestamp]/

Files created:
  ‚úì resource_metrics.json - CPU/GPU utilization time series
  ‚úì training_metrics.json - Training performance data  
  ‚úì profiling_results.png - 6-panel visualization plots

================================================================================
‚ö° QUICK TEST (No Profiling)
================================================================================

$ python testing/scripts/test_cpu_optimization.py

‚è±Ô∏è  Duration: ~30 seconds (5 iterations)
üìä Output: Console only

Use this to quickly validate configuration stability.

================================================================================
üìä WHAT TO EXPECT
================================================================================

Console output will show:
  ‚Ä¢ Initialization time (~30-60s for 150 workers)
  ‚Ä¢ Iteration progress (20 iterations)
  ‚Ä¢ CPU utilization mean/max/min
  ‚Ä¢ GPU utilization mean/max/min
  ‚Ä¢ Training performance summary

Target metrics:
  ‚úì CPU utilization: 70-80% average
  ‚úì GPU utilization: 20-40% (CPU-bound scenario)
  ‚úì Iteration time: 3-5s (after warmup)
  ‚úì Episodes per iteration: varies (0-10)

================================================================================
üìà VIEW RESULTS
================================================================================

After test completes:

$ ls testing/outputs/profiling_*/

Open the PNG file to view:
  ‚Ä¢ CPU utilization curve
  ‚Ä¢ GPU utilization curve
  ‚Ä¢ GPU memory usage
  ‚Ä¢ Iteration time stability
  ‚Ä¢ Episode progress
  ‚Ä¢ Reward progression

================================================================================
üîß TROUBLESHOOTING
================================================================================

If initialization hangs:
  ‚Üí Check: ray status
  ‚Üí Fix: ray stop && retry

If matplotlib error:
  ‚Üí Install: pip install matplotlib
  ‚Üí Note: Script still saves JSON data

If GPU monitoring fails:
  ‚Üí Check: nvidia-smi
  ‚Üí Script continues with 0 values

If memory error:
  ‚Üí Reduce workers temporarily for testing
  ‚Üí Edit script: num_workers=100

================================================================================
‚úÖ NEXT STEPS
================================================================================

After profiling test:

1. Review console summary (CPU/GPU utilization)
2. Check profiling_results.png for visual analysis
3. Examine JSON files for detailed data
4. If satisfied, run production training:
   $ bash train_production.sh

================================================================================
üí° REMEMBER
================================================================================

‚Ä¢ Profiling is for TEST MODE only
‚Ä¢ Production training has NO profiling overhead
‚Ä¢ Both use same configuration (150 workers √ó 4 envs)
‚Ä¢ Profiling helps validate configuration tuning

================================================================================
